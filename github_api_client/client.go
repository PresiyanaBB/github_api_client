package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"
	"strings"
	repos "tasks-mod/github_repos"
	usernames "tasks-mod/github_username"
)

const lineSeparator = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
const users = `https://api.github.com/users/%s?page=1&per_page=1000`
const userRepos = `https://api.github.com/users/%s/repos?page=1&per_page=1000`
const userRepoLanguages = `https://api.github.com/repos/%s/%s/languages?page=1&per_page=1000`

func GetBodyFromUrl(url string) ([]byte, error) {
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "Accept: application/json")
	//token was needed in order to make more than 60 GET requests per hour
	req.Header.Add("Authorization", "Bearer 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")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return body, err
	}
	return body, nil
}

func SaveToFile(filename, text string) {
	os.WriteFile(filename, []byte(text), 0644)
}

func ProcessFile(file *os.File) {
	scanner := bufio.NewReader(file)
	var result string
	wholeResultToSave := ""
	for {
		line, _, err := scanner.ReadLine()
		if err != nil {
			break
		}
		username := string(line)
		respUrl1 := fmt.Sprintf(users, username)
		respUrl2 := fmt.Sprintf(userRepos, username)

		bodyUsers, err := GetBodyFromUrl(respUrl1)
		if err != nil {
			break
		}
		bodyUsersRepos, err := GetBodyFromUrl(respUrl2)
		if err != nil {
			break
		}

		var user usernames.AutoGenerated
		if err := json.Unmarshal(bodyUsers, &user); err != nil {
			break
		}
		var dataToPrint []string

		var rep repos.AutoGenerated
		if err := json.Unmarshal(bodyUsersRepos, &rep); err != nil {
			break
		}

		result += lineSeparator
		result += fmt.Sprintf("User:"+"%51v"+"\nFullName:"+"%47v"+"\nReposCount:"+"%45v"+"\nFollowers:"+"%46v\n", username, user.Name, strconv.Itoa(user.PublicRepos), strconv.Itoa(user.Followers))
		result += lineSeparator
		for i := 0; i < len(rep); i++ {
			bodyRepoLanguages, _ := GetBodyFromUrl(fmt.Sprintf(userRepoLanguages, username, rep[i].Name))
			dataToPrint = append(dataToPrint, fmt.Sprintf("%-2v."+"  Repo Name:"+"%38v"+"  |  "+"Repo Forks:"+"%6v", i+1, rep[i].Name, strconv.Itoa(rep[i].Forks)))
			top3languages := strings.Split(string(bodyRepoLanguages), ",")
			if len(top3languages) > 3 {
				top3languages = top3languages[:3]
			}
			dataToPrint[i] += fmt.Sprintf("  |  Languages: "+"%70v", strings.Join(top3languages, " , "))
			if dataToPrint[i][len(dataToPrint[i])-1] != '}' {
				dataToPrint[i] += "}"
			} else {
				dataToPrint[i] += " "
			}
			dataToPrint[i] += fmt.Sprintf(" |  Active: "+"%10v - %v", rep[i].CreatedAt.Format("2006-01-02"), rep[i].UpdatedAt.Format("2006-01-02"))
		}
		result += strings.Join(dataToPrint, "\n")
		result += "\n" + lineSeparator
		result += "\n\n\n"
		fmt.Print(result)
		wholeResultToSave += result
		result = ""
	}

	SaveToFile("result.txt", wholeResultToSave)
}

func main() {
	file, _ := os.Open("github_usernames.txt")
	defer file.Close()
	ProcessFile(file)
}
